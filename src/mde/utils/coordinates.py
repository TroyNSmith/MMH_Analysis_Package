import mdevaluate as mde
import numpy as np


def centers_of_masses(
    coords: mde.coordinates.Coordinates, res_name: str
) -> mde.coordinates.CoordinatesMap:
    """
    Returns a CoordinatesMap associated with centers of masses for indicated residue.

    :param coords: CoordinateFrame object generated by mdevaluate.
    :param res_name: Name of residue corresponding to topology.
    """

    @mde.coordinates.map_coordinates
    def center_of_masses(coords, atom_idxs, shear: bool = False):
        res_ids = coords.residue_ids[atom_idxs]
        masses = coords.masses[atom_idxs]
        coords = coords.whole[atom_idxs]

        positions = np.array(
            [
                np.bincount(res_ids, weights=c * masses)[1:]
                / np.bincount(res_ids, weights=masses)[1:]
                for c in coords.T
            ]
        ).T[np.bincount(res_ids)[1:] != 0]

        return np.array(positions)

    atom_idxs = coords.subset(residue_name=res_name).atom_subset.indices

    return center_of_masses(coords, atom_idxs=atom_idxs).nojump


def generate_vectors(
    coords: mde.coordinates.CoordinateFrame, res_name: str, atom_1: str, atom_2: str
) -> np.ndarray:
    """
    Return vectors pointing from atom 1 to atom 2.

    :param coords: CoordinateFrame object generated by mdevaluate.
    :param res_name: String corresponding to topology residue name.
    :param atom_1: String corresponding to topology atom name.
    :param atom_2: String corresponding to topology atom name.
    """
    atom_1_idxs = coords.subset(
        atom_name=atom_1, residue_name=res_name
    ).atom_subset.indices

    atom_2_idxs = coords.subset(
        atom_name=atom_1, residue_name=res_name
    ).atom_subset.indices

    vectors = mde.coordinates.vectors(
        coords,
        atom_indices_a=atom_1_idxs,
        atom_indices_b=atom_2_idxs,
        normed=True,
    )

    return vectors


def multi_radial_selector(
    coords: mde.coordinates.CoordinateFrame,
    radial_bins: np.ndarray,
) -> tuple:
    """
    Sorts atoms in Trajectory into radial bins.

    :param coords: CoordinateFrame object generated by mdevaluate.
    :param radial_bins: Numpy array containing radial bin edges.
    :return atom_idxs: Tuple of index arrays (one array per radial bin).
    """
    atom_idxs = []
    for i in range(len(radial_bins) - 1):
        idx = mde.coordinates.selector_radial_cylindrical(
            coords, r_min=radial_bins[i], r_max=radial_bins[i + 1]
        )
        atom_idxs.append(idx)
    return atom_idxs
